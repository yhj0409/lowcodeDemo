diff --git a/node_modules/@alilc/lowcode-datasource-fetch-handler/es/index.js b/node_modules/@alilc/lowcode-datasource-fetch-handler/es/index.js
index 5ab20e6..9dc5033 100644
--- a/node_modules/@alilc/lowcode-datasource-fetch-handler/es/index.js
+++ b/node_modules/@alilc/lowcode-datasource-fetch-handler/es/index.js
@@ -1,3 +1,4 @@
+"use strict";
 var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
     function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
     return new (P || (P = Promise))(function (resolve, reject) {
@@ -7,15 +8,45 @@ var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, ge
         step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
 };
-import request from 'universal-request';
-// config 留着扩展
-export function createFetchHandler(config) {
-    // eslint-disable-next-line space-before-function-paren
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.createFetchHandler = void 0;
+const axios_1 = __importDefault(require("axios"));
+// config 可扩展参数
+function createFetchHandler(config) {
     return function (options) {
+        var _a;
         return __awaiter(this, void 0, void 0, function* () {
-            const requestConfig = Object.assign(Object.assign(Object.assign({}, options), { url: options.uri, method: options.method, data: options.params, headers: options.headers }), config);
-            const response = yield request(requestConfig);
+            const authorization = getUrlParam('authorization');
+            const headers = Object.assign(Object.assign({}, options.headers), (authorization ? { authorization } : {}));
+            const requestConfig = Object.assign(Object.assign(Object.assign({}, config), { url: options.uri, method: options.method, headers }), (((_a = options.method) === null || _a === void 0 ? void 0 : _a.toUpperCase()) === 'GET'
+                ? { params: options.params }
+                : { data: options.params }));
+            const response = yield (0, axios_1.default)(requestConfig);
             return response;
         });
     };
 }
+exports.createFetchHandler = createFetchHandler;
+/**
+ * 从URL的查询参数或锚点中获取指定参数值
+ * @param paramName 参数名称
+ * @returns 参数值（存在时返回字符串，否则返回null）
+ */
+function getUrlParam(paramName) {
+    // 1. 先尝试从查询参数中获取
+    let param = new URLSearchParams(window.location.search).get(paramName);
+    if (param !== null) {
+        return param;
+    }
+    // 2. 若查询参数中无，尝试从锚点中获取
+    const hash = window.location.hash;
+    const paramStart = hash.indexOf('?');
+    if (paramStart > -1) {
+        const paramString = hash.slice(paramStart);
+        param = new URLSearchParams(paramString).get(paramName);
+    }
+    return param;
+}
diff --git a/node_modules/@alilc/lowcode-datasource-fetch-handler/lib/index.js b/node_modules/@alilc/lowcode-datasource-fetch-handler/lib/index.js
index a8797de..9dc5033 100644
--- a/node_modules/@alilc/lowcode-datasource-fetch-handler/lib/index.js
+++ b/node_modules/@alilc/lowcode-datasource-fetch-handler/lib/index.js
@@ -13,16 +13,40 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.createFetchHandler = void 0;
-const universal_request_1 = __importDefault(require("universal-request"));
-// config 留着扩展
+const axios_1 = __importDefault(require("axios"));
+// config 可扩展参数
 function createFetchHandler(config) {
-    // eslint-disable-next-line space-before-function-paren
     return function (options) {
+        var _a;
         return __awaiter(this, void 0, void 0, function* () {
-            const requestConfig = Object.assign(Object.assign(Object.assign({}, options), { url: options.uri, method: options.method, data: options.params, headers: options.headers }), config);
-            const response = yield (0, universal_request_1.default)(requestConfig);
+            const authorization = getUrlParam('authorization');
+            const headers = Object.assign(Object.assign({}, options.headers), (authorization ? { authorization } : {}));
+            const requestConfig = Object.assign(Object.assign(Object.assign({}, config), { url: options.uri, method: options.method, headers }), (((_a = options.method) === null || _a === void 0 ? void 0 : _a.toUpperCase()) === 'GET'
+                ? { params: options.params }
+                : { data: options.params }));
+            const response = yield (0, axios_1.default)(requestConfig);
             return response;
         });
     };
 }
 exports.createFetchHandler = createFetchHandler;
+/**
+ * 从URL的查询参数或锚点中获取指定参数值
+ * @param paramName 参数名称
+ * @returns 参数值（存在时返回字符串，否则返回null）
+ */
+function getUrlParam(paramName) {
+    // 1. 先尝试从查询参数中获取
+    let param = new URLSearchParams(window.location.search).get(paramName);
+    if (param !== null) {
+        return param;
+    }
+    // 2. 若查询参数中无，尝试从锚点中获取
+    const hash = window.location.hash;
+    const paramStart = hash.indexOf('?');
+    if (paramStart > -1) {
+        const paramString = hash.slice(paramStart);
+        param = new URLSearchParams(paramString).get(paramName);
+    }
+    return param;
+}
diff --git a/node_modules/@alilc/lowcode-datasource-fetch-handler/src/index.ts b/node_modules/@alilc/lowcode-datasource-fetch-handler/src/index.ts
index 2ec6b5e..a0abbb9 100644
--- a/node_modules/@alilc/lowcode-datasource-fetch-handler/src/index.ts
+++ b/node_modules/@alilc/lowcode-datasource-fetch-handler/src/index.ts
@@ -1,21 +1,49 @@
 import { RuntimeOptionsConfig } from '@alilc/lowcode-datasource-types';
+import axios, { AxiosRequestConfig } from 'axios';
 
-import request from 'universal-request';
-import { RequestOptions, AsObject } from 'universal-request/lib/types';
-
-// config 留着扩展
+// config 可扩展参数
 export function createFetchHandler(config?: Record<string, unknown>) {
-  // eslint-disable-next-line space-before-function-paren
-  return async function(options: RuntimeOptionsConfig) {
-    const requestConfig: RequestOptions = {
-      ...options,
-      url: options.uri,
-      method: options.method as RequestOptions['method'],
-      data: options.params as AsObject,
-      headers: options.headers as AsObject,
+  return async function (options: RuntimeOptionsConfig) {
+    const authorization = getUrlParam('authorization');
+    const headers = {
+      ...options.headers,
+      ...(authorization ? { authorization } : {})
+    };
+
+    const requestConfig: AxiosRequestConfig = {
       ...config,
+      url: options.uri,
+      method: options.method as AxiosRequestConfig['method'],
+      headers,
+      ...(options.method?.toUpperCase() === 'GET'
+        ? { params: options.params }
+        : { data: options.params }),
     };
-    const response = await request(requestConfig);
+
+    const response = await axios(requestConfig);
     return response;
   };
 }
+/**
+ * 从URL的查询参数或锚点中获取指定参数值
+ * @param paramName 参数名称
+ * @returns 参数值（存在时返回字符串，否则返回null）
+ */
+function getUrlParam(paramName: string): string | null {
+  // 1. 先尝试从查询参数中获取
+  let param: string | null = new URLSearchParams(window.location.search).get(paramName);
+  if (param !== null) {
+    return param;
+  }
+
+  // 2. 若查询参数中无，尝试从锚点中获取
+  const hash = window.location.hash;
+  const paramStart = hash.indexOf('?');
+  if (paramStart > -1) {
+    const paramString = hash.slice(paramStart);
+    param = new URLSearchParams(paramString).get(paramName);
+  }
+  return param;
+}
+
+
